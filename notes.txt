stuff done:
homepage design

partially implemented create avdailbaility. Functionality is there, 
but i want the dates that have an availability to be highlighted which it curretnly is not.

core Functionalities:
    for customer:
        find and book an activity
        create a review
        view activity
        view availability
        view reviews

    for admin:
        view, like, everything
        create (almost) everything too

final core funcitonality to implement:
    integrate availability into booking

advanced functionalities:
    easy viewing of availability (doing that rn)
    filter for activities:
        name
        tags (r we even doing tag? I dunno)
        category obviously
        date

    integration with coupon for payment (I think joseph will do this tho)
    send activity to friends
    
ok that should b it for now ig

estimated amt of time to finish up core functionalities: 3h
estimated amt of time to implement all currently listed advanced features: max 15h depends on how many bugs ig

we'll aim to finish most of the functional stuff by saturday night, with a buffer until sunday.
Tuesday ideally should be all styling.



todo:
test upload photo-
create category-
create coupon
coupon usage
category filtering

kkkkk so i just finished the interface for uploading photos for activity creation.
 havent actly done the saving to backend part.


8/2/2024
uploading and viewing of photos is done.
CRUD for categories as well.
I can do CRUD for coupon now but i can't implement the actual usage right now cuz joseph hasn't done the cart.


stuff to do:
photo upload for reviews-
category filtering (make category a dropdown for create and edit activity)
coupon CRUD
maybe some styling for activity list and details as well.

beyond that, we don't really have that many funcitonalities to work on anymore.
Everything after this is just refinement.


9/2/2024
letsgo photo upload and display for review works
so i was thinking, when u click on a review it should take u to a page to display the details of the review too.

dropdown for category for create activtiy is done. Will do it for edit next.
coupon crud is done.

a bit overwhelmed at what to do. Probably will focus on aesthetics for a while.
Gna do activity details, i guess.

made some carousel looking thing for activity details with animation too yay.
Still have a LOT of work to do before the site actually looks good, but this is great progress.


tmr we'll do review details page. Probably can use a similar layout as the activityDetails
Then after that, I'll have to wait for joseph to do his cart stuff before i integrate with it.

Oh yeah, search bar and category filtering. Still haven't done that.
maybe a search and filter for reviews as well.
And also the stupid custom calendar thing.

That should be it for features.
For styling, I want to do the activity list, review details, and maybe I'll tweak a bit of the homepage as well.

Good job today. We really did a lot.


10/2/2024

the user flow for booking activity is now officially finished. 
I managed to send stuff to the cart. From there on, it's joseph's problem
The calendar thing works too, although not necessarily the way I want it to work specifically. 
It does work, though so whatever.

so now we hv to:
tweak the calendar to look nicer
implement it in the booking page as well

btw it might look better for the carousel thing if the thumbmnails are all the same size.
The acutal pictures can be left in different sizes but the thumbnails should look consistent.




import React, { useState, useEffect, useRef } from 'react';
import dayjs from 'dayjs';
import Badge from '@mui/material/Badge';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { PickersDay } from '@mui/x-date-pickers/PickersDay';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';
import { styled } from '@mui/material/styles';

function getRandomNumber(min, max) {
  return Math.round(Math.random() * (max - min) + min);
}

/**
 * Mimic fetch with abort controller https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort
 * ⚠️ No IE11 support
 */
function fakeFetch(date, { signal }) {
  return new Promise((resolve, reject) => {
    const timeout = setTimeout(() => {
      const daysInMonth = date.daysInMonth();
      const daysToHighlight = [1, 2, 3].map(() => getRandomNumber(1, daysInMonth));

      resolve({ daysToHighlight });
    }, 500);

    signal.onabort = () => {
      clearTimeout(timeout);
      reject(new DOMException('aborted', 'AbortError'));
    };
  });
}

const initialValue = dayjs();

const StyledDateCalendar = styled(DateCalendar)({
  // Override the max height and width here
  '& .MuiDateCalendar-viewTransitionContainer': {
    height:'600px',
    maxWidth: 'none',
  },
  'MuiDateCalendar-root css-1bpehs5-MuiDateCalendar-root': {
    height:'600px',
    maxWidth: 'none',
  },
});

function ServerDay(props) {
  const { availabilities = [], day, outsideCurrentMonth, ...other } = props;

  // Find the availability for the current day
  const availability = availabilities.find(avail => dayjs(avail.date).startOf('day').isSame(day, 'day'));

  // Extract the price from the availability, if available
  const price = availability ? availability.price : null;

  return (
    <Badge
      key={day.toString()}
      overlap="circular"
      badgeContent={(
        <div>
          {price != null && <div>${price}</div>} {/* Show the price if available */}
        </div>
      )}
    >
      <div style={{ padding: '10px' }}> {/* Adjust spacing here */}
        <PickersDay {...other} outsideCurrentMonth={outsideCurrentMonth} day={day} />
      </div>
    </Badge>
  );
}

export default function DateCalendarServerRequest({ activityId, availabilities, setDialogOpen, onChange }) {
  const requestAbortController = useRef(null);
  const [isLoading, setIsLoading] = useState(false);

  const fetchHighlightedDays = (date) => {
    const controller = new AbortController();
    fakeFetch(date, {
      signal: controller.signal,
    })
      .then(({ daysToHighlight }) => {
        setIsLoading(false);
      })
      .catch((error) => {
        // ignore the error if it's caused by `controller.abort`
        if (error.name !== 'AbortError') {
          throw error;
        }
      });

    requestAbortController.current = controller;
  };

  useEffect(() => {
    fetchHighlightedDays(initialValue);
    // abort request on unmount
    return () => requestAbortController.current?.abort();
  }, []);

  const handleMonthChange = (date) => {
    if (requestAbortController.current) {
      // make sure that you are aborting useless requests
      // because it is possible to switch between months pretty quickly
      requestAbortController.current.abort();
    }

    setIsLoading(true);
    fetchHighlightedDays(date);
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <StyledDateCalendar
        defaultValue={initialValue}
        loading={isLoading}
        onMonthChange={handleMonthChange}
        renderLoading={() => <DayCalendarSkeleton />}
        onChange={onChange}
        slots={{
          day: ServerDay,
        }}
        slotProps={{
          day: {
            availabilities,
            sx:{fontSize:'1.2rem'}
          },
        }}
        sx={{ width: '500px', maxHeight:"800px"}}
        
      />
    </LocalizationProvider>
  );
}
